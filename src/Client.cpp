#include <asio.hpp>
#include <iostream>
#include <fstream>
#include <sstream>

using asio::ip::tcp;

int main() {
    try {
        asio::io_context io;

        tcp::resolver resolver(io);
        auto endpoints = resolver.resolve("127.0.0.1", "8080");
        tcp::socket socket(io);
        asio::connect(socket, endpoints);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
        std::string request = "GET /sample HTTP/1.1\r\nHost: 127.0.0.1\r\n\r\n";
        asio::write(socket, asio::buffer(request));

        // –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä
        asio::streambuf header_buf;
        asio::read_until(socket, header_buf, "\n\n");
        std::istream header_stream(&header_buf);

        std::string filename;
        size_t filesize;
        header_stream >> filename >> filesize;
        header_stream.ignore(2); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–∏–π \n\n

        std::cout << "üì¶ Receiving file: " << filename << ", size: " << filesize << " bytes\n";

        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        std::ofstream output_file(filename, std::ios::binary);
        if (!output_file.is_open()) {
            std::cerr << "‚ùå Failed to open file for writing\n";
            return 1;
        }

        // –°–Ω–∞—á–∞–ª–∞ ‚Äî –≤—Å—ë, —á—Ç–æ —É–∂–µ –≤ –±—É—Ñ–µ—Ä–µ
        size_t bytes_written = 0;
        if (header_buf.size() > 0) {
            std::vector<char> buf(header_buf.size());
            header_buf.sgetn(buf.data(), buf.size());
            output_file.write(buf.data(), buf.size());
            bytes_written += buf.size();
        }

        // –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è
        std::vector<char> buffer(4096);
        while (bytes_written < filesize) {
            size_t to_read = std::min(buffer.size(), filesize - bytes_written);
            size_t bytes_read = socket.read_some(asio::buffer(buffer.data(), to_read));
            output_file.write(buffer.data(), bytes_read);
            bytes_written += bytes_read;
        }

        std::cout << "‚úÖ File received successfully.\n";
        output_file.close();
    }
    catch (std::exception& e) {
        std::cerr << "‚ö† Exception: " << e.what() << "\n";
    }

    return 0;
}
